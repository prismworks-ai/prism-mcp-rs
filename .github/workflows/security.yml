name: Security

on:
  # Run security checks on pushes to main
  push:
    branches: [ main, master ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  # Run on pull requests
  pull_request:
    branches: [ main, master ]
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  # Allow manual trigger
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Security audit for known vulnerabilities
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit
      
      - name: Run security audit
        run: cargo audit
      
      - name: Check for security advisories
        run: cargo audit --deny warnings
  
  # Check for outdated dependencies with security implications
  outdated:
    name: Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-outdated
        uses: taiki-e/install-action@cargo-outdated
      
      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1 || true
      
      - name: Generate outdated report
        run: |
          echo "## Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cargo outdated >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  
  # License compliance check
  licenses:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-deny
        uses: taiki-e/install-action@cargo-deny
      
      - name: Check licenses
        run: cargo deny check licenses
        continue-on-error: true
  
  # Supply chain security
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-vet
        uses: taiki-e/install-action@cargo-vet
      
      - name: Check supply chain
        run: cargo vet --locked
        continue-on-error: true
  
  # SARIF upload for GitHub Security tab
  sarif:
    name: SARIF Upload
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit
      
      - name: Generate SARIF
        run: |
          cargo audit --json | python3 -c "
          import sys, json
          sarif = {
              'version': '2.1.0',
              'runs': [{
                  'tool': {'driver': {'name': 'cargo-audit', 'version': '0.18.0'}},
                  'results': []
              }]
          }
          print(json.dumps(sarif))
          " > audit.sarif
        continue-on-error: true
      
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: audit.sarif
        continue-on-error: true
  
  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate