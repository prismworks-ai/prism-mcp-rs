[package]
name = "prism-mcp-rs"
version = "0.1.0"
edition = "2024"
rust-version = "1.85" # Minimum for Rust 2024 Edition
authors = ["Prismworks AI <team@prismworks.ai>"]
description = "Enterprise-grade Rust SDK for the Model Context Protocol (MCP) with multiple transport support"
license = "MIT"
repository = "https://github.com/prismworks-ai/prism-mcp-rs"
keywords = ["mcp", "ai", "protocol", "jsonrpc", "llm"]
categories = ["api-bindings", "network-programming", "development-tools", "asynchronous"]
readme = "README.md"
homepage = "https://prismworks.ai"
documentation = "https://docs.rs/prism-mcp-rs"
exclude = [
    "target/",
    ".github/",
    ".git/",
    ".local/",
    ".aicontext/",
    "docs/",
    "benches/",
    "scripts/",
    "tests/",
    "*.md",
    "!README.md",
    "Makefile",
    "deny.toml",
    "clippy.toml",
    "rustfmt.toml",
    "codecov.yml",
    ".DS_Store",
    "*.profraw",
    "*.log"
]

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }

[lib]
name = "prism_mcp_rs"
path = "src/lib.rs"

[dependencies]
# Async runtime
tokio = { version = "1.40", features = ["full"] }
tokio-stream = { version = "0.1", features = ["sync"], optional = true }
futures = { version = "0.3", optional = true }
async-trait = "0.1.83"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# HTTP client/server
reqwest = { version = "0.12", features = ["json", "stream", "rustls-tls"], default-features = false, optional = true }

# Authorization support
rand = "0.8"
base64 = "0.22"
sha2 = "0.10"
axum = { version = "0.8", optional = true }
tower = { version = "0.5", optional = true }
tower-http = { version = "0.6", features = ["cors"], optional = true }

# Streaming HTTP support
h2 = { version = "0.3", optional = true }
hyper = { version = "1.0", features = ["full"], optional = true }
http = { version = "0.2", optional = true }
http-body-util = { version = "0.1", optional = true }
bytes = { version = "1.0", optional = true }

# complete compression
flate2 = { version = "1.0", optional = true }
brotli = { version = "6.0", optional = true }
zstd = { version = "0.13", optional = true }

# WebSocket support
tokio-tungstenite = { version = "0.27", optional = true }
futures-util = { version = "0.3", optional = true }

# Utilities
uuid = { version = "1.11", features = ["v4", "serde"] }
url = "2.5"
thiserror = "2.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", optional = true }
chrono = { version = "0.4", features = ["serde"], optional = true }
fastrand = { version = "2.0", optional = true }
dirs = { version = "5.0", optional = true }
once_cell = "1.19"

# Schema validation
jsonschema = { version = "0.32", optional = true }

# Plugin system dependencies
libloading = { version = "0.8", optional = true }
notify = { version = "6.1", optional = true }
serde_yaml = { version = "0.9", optional = true }

# Note: Process support is built into modern tokio (tokio::process)
# No additional dependencies needed for stdio transport

[dev-dependencies]
tokio-test = "0.4"
tempfile = "3.8"
criterion = "0.7"
pretty_assertions = "1.4"
chrono = { version = "0.4", features = ["serde"] }
futures = "0.3"
wiremock = "0.6"

[features]
default = ["stdio", "tracing-subscriber", "chrono", "dirs", "fastrand"]
full = ["stdio", "http", "websocket", "streaming-http", "validation", "plugin", "tracing-subscriber", "chrono", "dirs", "fastrand"]
stdio = ["chrono", "dirs", "fastrand"]  # Uses tokio::process + chrono for tool metadata + dirs for common roots + fastrand for retry jitter
http = ["axum", "tower", "tower-http", "reqwest", "chrono", "tokio-stream", "futures", "fastrand", "dirs", "dep:http"]
websocket = ["tokio-tungstenite", "http", "futures", "futures-util", "fastrand"]
validation = ["jsonschema"]
plugin = ["libloading", "notify", "serde_yaml"]

# complete streaming features
streaming-http = ["http", "bytes", "futures", "tokio-stream", "http-body-util"]
streaming-http2 = ["streaming-http", "h2", "hyper"]
streaming-compression = ["streaming-http", "flate2", "brotli", "zstd"]
streaming-full = ["streaming-http", "streaming-http2", "streaming-compression"]

# Convenience Methods Demo
[[example]]
name = "convenience_methods_demo"
path = "examples/convenience_methods_demo.rs"
required-features = ["tracing-subscriber"]

# Client Examples
[[example]]
name = "http_client"
path = "examples/client/http_client.rs"
required-features = ["http"]

[[example]]
name = "advanced_http_client"
path = "examples/client/advanced_http_client.rs"
required-features = ["http", "tracing-subscriber", "chrono", "fastrand"]

[[example]]
name = "websocket_client"
path = "examples/client/websocket_client.rs"
required-features = ["websocket"]

# Transport Selection Guide
[[example]]
name = "transport_selection_guide"
path = "examples/transport_selection_guide.rs"
required-features = ["tracing-subscriber"]

[[example]]
name = "conservative_http_demo"
path = "examples/client/conservative_http_demo.rs"
required-features = ["http", "tracing-subscriber"]

# complete Features Showcase
[[example]]
name = "advanced_features_showcase"
path = "examples/advanced_features_showcase.rs"
required-features = ["tracing-subscriber"]

# Performance Benchmarks
[[example]]
name = "performance_benchmarks"
path = "examples/performance_benchmarks.rs"
required-features = ["tracing-subscriber"]

# Streaming HTTP Showcase
[[example]]
name = "streaming_http_showcase"
path = "examples/streaming_http_showcase.rs"
required-features = ["streaming-http", "tracing-subscriber", "chrono"]

# HTTP/2 Server Push Examples
[[example]]
name = "streaming_http2_showcase"
path = "examples/streaming_http2_showcase.rs"
required-features = ["streaming-http2", "tracing-subscriber", "chrono"]

[[example]]
name = "http2_server"
path = "examples/server/http2_server.rs"
required-features = ["streaming-http2", "tracing-subscriber", "chrono"]

# Server Examples
[[example]]
name = "enhanced_echo_server"
path = "examples/server/enhanced_echo_server.rs"
required-features = ["stdio", "tracing-subscriber"]

[[example]]
name = "database_server"
path = "examples/server/database_server.rs"
required-features = ["stdio", "tracing-subscriber"]

[[example]]
name = "http_server"
path = "examples/server/http_server.rs"
required-features = ["http"]

[[example]]
name = "websocket_server"
path = "examples/server/websocket_server.rs"
required-features = ["websocket"]

# Utility Examples
[[example]]
name = "transport_benchmark"
path = "examples/utilities/transport_benchmark.rs"
required-features = ["http", "tracing-subscriber"]


[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]