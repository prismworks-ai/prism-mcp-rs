#!/bin/bash

# Git pre-push hook - runs CI checks before pushing to remote
# Install: cp scripts/pre-push .git/hooks/pre-push && chmod +x .git/hooks/pre-push

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🚀 Running pre-push CI checks...${NC}"
echo ""

# Get the remote and branch
remote="$1"
url="$2"

# Check if we're pushing to main/master/develop
protected_branches="main master develop"
current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

is_protected=false
for branch in $protected_branches; do
    if [[ "$current_branch" == "$branch" ]]; then
        is_protected=true
        break
    fi
done

# Determine check level based on branch
if [[ "$is_protected" == "true" ]]; then
    echo -e "${YELLOW}⚠️  Pushing to protected branch: $current_branch${NC}"
    echo -e "${YELLOW}   Running comprehensive CI checks...${NC}"
    echo ""
    
    # Run full CI checks for protected branches
    if [[ -f "scripts/local-ci.sh" ]]; then
        ./scripts/local-ci.sh
    elif [[ -f "Makefile" ]]; then
        make push-ready
    else
        # Fallback to basic checks
        cargo fmt --all -- --check
        cargo clippy --all-features -- -W clippy::all
        cargo test --all-features
    fi
else
    echo -e "${BLUE}ℹ️  Pushing to feature branch: $current_branch${NC}"
    echo -e "${BLUE}   Running quick CI checks...${NC}"
    echo ""
    
    # Run quick checks for feature branches
    if [[ -f "scripts/local-ci.sh" ]]; then
        ./scripts/local-ci.sh --quick
    elif [[ -f "Makefile" ]]; then
        make quick
    else
        # Fallback to quick checks
        cargo fmt --all -- --check
        cargo check --all-features
        cargo test --lib
    fi
fi

# Check for uncommitted changes (shouldn't happen, but good to verify)
if ! git diff --quiet || ! git diff --cached --quiet; then
    echo -e "${YELLOW}⚠️  Warning: You have uncommitted changes${NC}"
    echo "   These changes will not be pushed."
    echo ""
fi

# Check for large files
large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./target/*" 2>/dev/null)
if [[ -n "$large_files" ]]; then
    echo -e "${YELLOW}⚠️  Warning: Large files detected (>10MB):${NC}"
    echo "$large_files" | while read -r file; do
        size=$(du -h "$file" | cut -f1)
        echo "   • $file ($size)"
    done
    echo ""
    read -p "Continue with push? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}Push cancelled${NC}"
        exit 1
    fi
fi

# Success message
echo ""
echo -e "${GREEN}✅ All pre-push checks passed!${NC}"
echo -e "${GREEN}   Proceeding with push to $remote...${NC}"
echo ""

# Allow the push to proceed
exit 0
